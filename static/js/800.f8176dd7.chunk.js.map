{"version":3,"file":"static/js/800.f8176dd7.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/Profileinfo/ProfileInfo.module.css?faff","components/Profile/Profileinfo/ProfileStatusWithHooks.tsx","components/Profile/Profileinfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","components/Profile/MyPosts/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirectComponent.tsx","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__vt1lt\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = React.memo((props: ProfileStatusType) => {\r\n\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    const toggleEditMode = () => {\r\n        setEditMode(!editMode)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n\r\n    return (\r\n        <div>\r\n            {!editMode\r\n                ?\r\n                <div>\r\n                    <span onDoubleClick={toggleEditMode}>{props.status || 'No status'}</span>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <input\r\n                        onChange={onChangeStatus}\r\n                        autoFocus={true}\r\n                        onBlur={toggleEditMode}\r\n                        value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n\r\n})\r\n","import React from 'react';\nimport s from './ProfileInfo.module.css'\nimport {UserProfileType} from \"../../../redux/profile-reducer\";\nimport {Preloader} from \"../../common/Preloader\";\nimport avatar from '../../../img/1.png'\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\n\n\ntype ProfileInfoPropsType = {\n    profile: UserProfileType\n    status: string\n    updateStatus: (status: string) => void\n}\nexport const ProfileInfo = React.memo((props: ProfileInfoPropsType) => {\n\n    if (!props.profile) {\n        return <Preloader/>\n    }\n\n    return (\n        <div>\n            <div className={s.descriptionBlock}>\n                <img src={props.profile.photos.large ? props.profile.photos.large : avatar} alt={'user avatar'}/>\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\n\n            </div>\n        </div>\n    );\n})\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__1VuoF\",\"like\":\"Post_like__6rwzM\"};","import React from 'react';\nimport s from './Post.module.css'\n\nexport type PostPropsType = {\n    id: string\n    message: string\n    likeCount: number\n\n}\n\nexport const Post = (props: PostPropsType) => {\n    return (\n        <div className={s.item}><img\n            src=\"https://us.123rf.com/450wm/yupiramos/yupiramos1709/yupiramos170900442/85024718-engineer-avatar-.jpg?ver=6\"\n            alt=\"Logo\"/>\n            {props.message}\n            <div className={s.like}>\n                <span>like </span>\n                {props.likeCount}\n            </div>\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__QOJKf\"};","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {maxLengthCreator, requiredField} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\ntype AddPostFormDataType = {\r\n    newPostBody: string\r\n}\r\n\r\nconst maxLength = maxLengthCreator(30)\r\n\r\nconst AddPostForm = (props: InjectedFormProps<AddPostFormDataType>) => {\r\n\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    name={'newPostBody'}\r\n                    placeholder={'Enter your new post'}\r\n                    validate={[requiredField, maxLength]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport const AddPostFormRedux = reduxForm<AddPostFormDataType>({form: 'profileAddPostForm'})(AddPostForm)","import React from 'react';\nimport {Post} from \"./Post/Post\";\nimport s from './MyPosts.module.css'\nimport {MyPostPropsType} from \"./MyPostsContainer\";\nimport {AddPostFormRedux} from \"./AddPostForm\";\n\n\nexport const MyPosts = React.memo((props: MyPostPropsType) => {\n\n\n    const addNewPost = (value: { newPostBody: string }) => {\n        props.addPost(value.newPostBody)\n    }\n\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My post</h3>\n            <div>New post</div>\n            <AddPostFormRedux onSubmit={addNewPost}/>\n            {props.posts.map(p => <Post key={p.id} id={p.id} message={p.message} likeCount={p.likeCount}/>)}\n        </div>\n    );\n})\n\n\n","import React from 'react';\nimport {MyPosts} from \"./MyPosts\";\nimport {addPost} from \"../../../redux/profile-reducer\";\nimport {connect} from \"react-redux\";\nimport {StoreType} from \"../../../redux/redux-store\";\nimport {PostPropsType} from \"./Post/Post\";\n\ntype ProfilePageType = {\n    posts: PostPropsType[]\n    newPostText: string\n}\n\ntype mapStateToPropsType = {\n    posts: PostPropsType[]\n}\n\ntype mapDispatchToPropsType = {\n    addPost: (value: string) => void\n}\n\n\nexport type MyPostPropsType = mapStateToPropsType & mapDispatchToPropsType\n\nconst mapStateToProps = (state: StoreType): mapStateToPropsType => {\n    return {\n        posts: state.profilePage.posts\n    }\n}\n\n\nexport const MyPostsContainer = connect(mapStateToProps, {addPost})(MyPosts)","import React from 'react';\nimport {ProfileInfo} from \"./Profileinfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {UserProfileType} from \"../../redux/profile-reducer\";\n\n\ntype ProfilePropsType = {\n    profile: UserProfileType\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport const Profile = React.memo((props: ProfilePropsType) => {\n    return (\n        <div>\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\n            <MyPostsContainer/>\n        </div>\n    );\n})\n\n\n","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {StoreType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, updateStatus, UserProfileType} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirectComponent} from \"../../hoc/withAuthRedirectComponent\";\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & mapStateToProps & mapDispatchToPropsType\r\n\r\ntype mapStateToProps = {\r\n    profile: UserProfileType\r\n    status: string\r\n    userId: string\r\n    isAuth: boolean\r\n}\r\n\r\n\r\ntype mapDispatchToPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (userId: string) => void\r\n}\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType, StoreType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.userId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst MapStateToProps = (state: StoreType): mapStateToProps => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    //@ts-ignore\r\n    userId: state.auth.id,\r\n    //@ts-ignore\r\n    isAuth: state.auth.isAuth,\r\n\r\n\r\n})\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(MapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    withAuthRedirectComponent\r\n)(ProfileContainer)","import {Redirect, withRouter} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {StoreType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStateToPropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nconst MapStateToPropsForRedirect = (state: StoreType): MapStateToPropsForRedirectType => ({\r\n// @ts-ignore\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirectComponent<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStateToPropsForRedirectType) => {\r\n\r\n        let {isAuth, ...restAuth} = props\r\n\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restAuth as T}/>\r\n    }\r\n\r\n    // @ts-ignore\r\n    return connect(MapStateToPropsForRedirect)(withRouter(RedirectComponent))\r\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["ProfileStatusWithHooks","React","props","useState","editMode","setEditMode","status","setStatus","toggleEditMode","updateStatus","useEffect","onChange","e","currentTarget","value","autoFocus","onBlur","onDoubleClick","ProfileInfo","profile","className","s","src","photos","large","avatar","alt","Preloader","Post","message","likeCount","maxLength","maxLengthCreator","AddPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","validate","requiredField","MyPosts","addPost","newPostBody","posts","map","p","id","MyPostsContainer","connect","state","profilePage","Profile","ProfileContainer","userId","this","match","params","history","push","getUserProfile","getStatus","compose","auth","isAuth","withRouter","withAuthRedirectComponent","MapStateToPropsForRedirect","Component","restAuth","to","_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","length","err","unsupportedIterableToArray","TypeError"],"sourceRoot":""}