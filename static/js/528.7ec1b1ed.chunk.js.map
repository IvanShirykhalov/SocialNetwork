{"version":3,"file":"static/js/528.7ec1b1ed.chunk.js","mappings":"mLACA,GAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,2BCA5I,EAAyB,2B,mBCQZA,EAAa,SAACC,GACvB,OACI,gBAAKC,UAAWC,EAAhB,UAA0B,SAAC,KAAD,CAASC,GAAE,mBAAcH,EAAMI,IAA/B,SAAsCJ,EAAMK,UCFjEC,EAAU,SAACN,GACpB,OACI,gBAAKC,UAAWC,EAAAA,QAAhB,SAA4BF,EAAMO,W,uCCFpCC,GAAYC,EAAAA,EAAAA,GAAiB,KAE7BC,EAAiBC,EAAAA,MAAW,SAACX,GAC/B,OACI,kBAAMY,SAAUZ,EAAMa,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CACIC,YAAW,wBACXC,UAAWC,EAAAA,EACXZ,KAAM,iBACNa,SAAU,CAACC,EAAAA,EAAeX,QAGlC,0BACI,6CAMHY,GAAuBC,EAAAA,EAAAA,GAAkC,CAACC,KAAM,wBAAzCD,CAAkEX,GCrBzFa,EAAUZ,EAAAA,MAAW,SAACX,GAO/B,OACI,iBAAKC,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,aAAhB,SACKF,EAAMwB,YAAYC,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAC5B,EAAD,CAAuBM,KAAMsB,EAAEtB,KAAMD,GAAIuB,EAAEvB,IAA1BuB,EAAEvB,UAE3D,iBAAKH,UAAWC,EAAAA,SAAhB,UACKF,EAAMwB,YAAYI,SAASF,KAAI,SAAAG,GAAC,OAAI,SAACvB,EAAD,CAAoBF,GAAIyB,EAAEzB,GAAIG,QAASsB,EAAEtB,SAA3BsB,EAAEzB,QACrD,0BACI,SAACgB,EAAD,CAAsBR,SAZhB,SAACkB,GACnB9B,EAAM+B,WAAWD,EAAME,8B,mBCqB/B,GAAeC,E,QAAAA,KACXC,EAAAA,EAAAA,KAXoB,SAACC,GAErB,MAAO,CACHX,YAAaW,EAAMX,eAQE,CAACO,WAAAA,EAAAA,KAAcK,EAAAA,EAD5C,CAEEb,I,gICzBIc,EAA6B,SAACF,GAAD,MAAuD,CAEtFG,OAAQH,EAAMI,KAAKD,SAGhB,SAASF,EAA6BI,GAWzC,OAAON,EAAAA,EAAAA,IAAQG,EAARH,EAAoCO,EAAAA,EAAAA,KAVjB,SAACzC,GAEvB,IAAKsC,EAAuBtC,EAAvBsC,OAAWI,GAAhB,OAA4B1C,EAA5B,GAEA,OAAKsC,GAEE,SAACE,GAAD,UAAeE,KAFF,SAAC,KAAD,CAAUvC,GAAI","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/withAuthRedirectComponent.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__GBEfS\",\"dialogsItems\":\"Dialogs_dialogsItems__3nOXU\",\"active\":\"Dialogs_active__sIEa8\",\"messages\":\"Dialogs_messages__fWKee\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"DialogItem_dialog__LoEdG\"};","import React from 'react';\nimport s from \"./DialogItem.module.css\";\nimport {NavLink} from \"react-router-dom\";\n\nexport type DialogPropsType = {\n    name: string\n    id: string\n}\n\nexport const DialogItem = (props: DialogPropsType) => {\n    return (\n        <div className={s.dialog}><NavLink to={`/dialogs/${props.id}`}>{props.name}</NavLink></div>\n    );\n};\n","import React from 'react';\nimport s from \"../Dialogs.module.css\";\n\nexport type MessagePropsType = {\n    id: string\n    message: string\n\n}\n\nexport const Message = (props: MessagePropsType) => {\n    return (\n        <div className={s.message}>{props.message}</div>\n    );\n};\n","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {maxLengthCreator, requiredField} from \"../../utils/validators/validators\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\n\r\ntype AddMessageFormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength = maxLengthCreator(100)\r\n\r\nconst AddMessageForm = React.memo((props: InjectedFormProps<AddMessageFormDataType>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    placeholder={`Enter your Message...`}\r\n                    component={Textarea}\r\n                    name={'newMessageBody'}\r\n                    validate={[requiredField, maxLength]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n\r\n    )\r\n})\r\nexport const AddMessagesFormRedux = reduxForm<AddMessageFormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import React from 'react';\nimport s from './Dialogs.module.css'\nimport {DialogItem} from \"./DialogItem/DialogItem\";\nimport {Message} from \"./Message/Message\";\nimport {DialogsPropsType} from \"./DialogsContainer\";\nimport {AddMessagesFormRedux} from \"./AddMessageForm\";\n\n\nexport const Dialogs = React.memo((props: DialogsPropsType) => {\n\n\n    const addNewMessage = (value: { newMessageBody: string }) => {\n        props.addMessage(value.newMessageBody)\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {props.dialogsPage.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>)}\n            </div>\n            <div className={s.messages}>\n                {props.dialogsPage.messages.map(m => <Message key={m.id} id={m.id} message={m.message}/>)}\n                <div>\n                    <AddMessagesFormRedux onSubmit={addNewMessage}/>\n                </div>\n            </div>\n        </div>\n    )\n})\n\n// export class Dialogs extends React.Component<DialogsPropsType, StoreType> {\n//     constructor(props: DialogsPropsType) {\n//         super(props);\n//\n//     }\n//\n//     addNewMessage(value: { newMessageBody: string }) {\n//         debugger\n//         this.props.addMessage(value.newMessageBody)\n//     }\n//\n//     render() {\n//         return (\n//             <div className={s.dialogs}>\n//                 <div className={s.dialogsItems}>\n//                     {this.props.dialogsPage.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>)}\n//                 </div>\n//                 <div className={s.messages}>\n//                     {this.props.dialogsPage.messages.map(m => <Message key={m.id} id={m.id} message={m.message}/>)}\n//                     <div>\n//                         <AddMessagesFormRedux onSubmit={this.addNewMessage}/>\n//                     </div>\n//                 </div>\n//             </div>\n//         )\n//     }\n// }\n\n\n","import React from 'react';\nimport {addMessage} from \"../../redux/dialogs-reducer\";\nimport {Dialogs} from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {StoreType} from \"../../redux/redux-store\";\nimport {DialogPropsType} from \"./DialogItem/DialogItem\";\nimport {MessagePropsType} from \"./Message/Message\";\nimport {withAuthRedirectComponent} from \"../../hoc/withAuthRedirectComponent\";\nimport {compose} from \"redux\";\n\nexport type DialogsPageType = {\n    dialogs: DialogPropsType[]\n    messages: MessagePropsType[]\n}\n\ntype mapStateToProps = {\n    dialogsPage: DialogsPageType\n}\n\ntype mapDispatchToPropsType = {\n    addMessage: (value: string) => void\n}\n\nconst mapStateToProps = (state: StoreType): mapStateToProps => {\n\n    return {\n        dialogsPage: state.dialogsPage,\n    }\n}\n\n\nexport type DialogsPropsType = mapStateToProps & mapDispatchToPropsType\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {addMessage}), withAuthRedirectComponent\n)(Dialogs)","import {Redirect, withRouter} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {StoreType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStateToPropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nconst MapStateToPropsForRedirect = (state: StoreType): MapStateToPropsForRedirectType => ({\r\n// @ts-ignore\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirectComponent<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStateToPropsForRedirectType) => {\r\n\r\n        let {isAuth, ...restAuth} = props\r\n\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restAuth as T}/>\r\n    }\r\n\r\n    // @ts-ignore\r\n    return connect(MapStateToPropsForRedirect)(withRouter(RedirectComponent))\r\n}"],"names":["DialogItem","props","className","s","to","id","name","Message","message","maxLength","maxLengthCreator","AddMessageForm","React","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","requiredField","AddMessagesFormRedux","reduxForm","form","Dialogs","dialogsPage","dialogs","map","d","messages","m","value","addMessage","newMessageBody","compose","connect","state","withAuthRedirectComponent","MapStateToPropsForRedirect","isAuth","auth","Component","withRouter","restAuth"],"sourceRoot":""}