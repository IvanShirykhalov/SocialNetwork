{"version":3,"file":"static/js/730.74cd8910.chunk.js","mappings":"0NACA,EAAmC,sCAAnC,EAAqF,+BAArF,EAA8H,6BAA9H,EAA8K,sC,2BCMjKA,EAAyBC,EAAAA,MAAW,SAACC,GAG9C,OAAgCC,EAAAA,EAAAA,WAAkB,GAAlD,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAA4BF,EAAAA,EAAAA,UAAiBD,EAAMI,QAAnD,eAAOA,EAAP,KAAeC,EAAf,KAEMC,EAAiB,WACnBH,GAAaD,GACbF,EAAMO,aAAaH,IAavB,OALAI,EAAAA,EAAAA,YAAU,WACNH,EAAUL,EAAMI,UACjB,CAACJ,EAAMI,UAIN,yBACMF,GAME,0BACI,kBACIO,SApBG,SAACC,GACpBL,EAAUK,EAAEC,cAAcC,QAoBVC,WAAW,EACXC,OAAQR,EACRM,MAAOR,OATf,4BACI,qCAAe,iBAAMW,cAAeT,EAArB,SAAsCN,EAAMI,QAAU,sBCvB5EY,EAAc,SAAChB,GAIxB,OAAO,2BACFA,EAAMiB,UAAW,0BACd,mBAAQC,QAASlB,EAAMmB,aAAvB,qBAEJ,4BAEI,4BAAK,qCAEDnB,EAAMoB,QAAQC,aAElB,4BAAK,sCAEDrB,EAAMoB,QAAQE,YAGlB,4BAAK,+CAAL,IAEItB,EAAMoB,QAAQG,eAAiB,MAAQ,QAEvCvB,EAAMoB,QAAQG,iBACd,4BAAK,0DAAL,IAEIvB,EAAMoB,QAAQI,8BACtB,0BACI,uCAAeC,OAEVC,KAAK1B,EAAMoB,QAAQO,UACnBC,KAAI,SAACC,GAAD,OAAS,SAACC,EAAD,CACSC,aAAcF,EAEdG,aAAchC,EAAMoB,QAAQO,SAASE,IAHhCA,kB,mBCEnCI,GAA2BC,EAAAA,EAAAA,GAAsC,CAACC,KAAM,gBAA7CD,EAhCqD,SAAClC,GAE1F,OAAO,kBAAMoC,SAAUpC,EAAMqC,aAAtB,WACH,4BACI,qCACCrC,EAAMsC,QACH,gBAAKC,UAAWC,EAAhB,SACKxC,EAAMsC,YAInB,4BACI,4BAAK,sCAAiBG,EAAAA,EAAAA,IAAY,YAAa,WAAY,GAAIC,EAAAA,QAC/D,4BAAK,uCAAkBD,EAAAA,EAAAA,IAAY,WAAY,UAAW,GAAIE,EAAAA,QAC9D,0BACI,uCAAelB,OAEVC,KAAK1B,EAAMoB,QAAQO,UACnBC,KAAI,SAACC,GACF,OAAO,iBAAeU,UAAWC,EAA1B,WACH,yBAAIX,EAAJ,SAAeY,EAAAA,EAAAA,IAAYZ,EAAD,mBAAkBA,GAAO,GAAIa,EAAAA,MAD1Cb,YAM7B,4BAAK,+CAAL,KAAiCY,EAAAA,EAAAA,IAAY,GAAI,iBAAkB,GAAIC,EAAAA,GAAO,CAACE,KAAM,iBACrF,4BAAK,mDAAL,KAAqCH,EAAAA,EAAAA,IAAY,SAAU,4BAA6B,GAAIE,EAAAA,gBCnB3FE,EAAc9C,EAAAA,MAAW,SAACC,GAGnC,OAAgCC,EAAAA,EAAAA,WAAkB,GAAlD,eAAOC,EAAP,KAAiBC,EAAjB,KAEA,IAAKH,EAAMoB,QACP,OAAO,SAAC0B,EAAA,EAAD,IAgBX,OACI,0BACI,iBAAKP,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAaO,IAAK/C,EAAMoB,QAAQ4B,OAAOC,MAAQjD,EAAMoB,QAAQ4B,OAAOC,MAAQC,EACvFC,IAAK,iBACV,yBACKnD,EAAMiB,UAAW,kBAAO2B,KAAK,OAAOnC,SAnBzB,SAACC,GACF,OAAnBA,EAAE0C,OAAOC,OAAkB3C,EAAE0C,OAAOC,MAAMC,QAC1CtD,EAAMuD,UAAU7C,EAAE0C,OAAOC,MAAM,SAmB1BnD,GACK,SAAC+B,EAAD,CAA0BG,SAhB3B,SAACoB,GACdxD,EAAMyD,YAAYD,GAAUE,MAAK,WAC7BvD,GAAY,OAc4CwD,cAAe3D,EAAMoB,QACzCA,QAASpB,EAAMoB,WACzC,SAACJ,EAAD,CAAaI,QAASpB,EAAMoB,QAASH,QAASjB,EAAMiB,QACvCE,aAAc,kBAAMhB,GAAY,OAEnD,SAACL,EAAD,CAAwBM,OAAQJ,EAAMI,OAAQG,aAAcP,EAAMO,uBAYrEuB,EAAU,SAAC9B,GACpB,OAAO,iBAAKuC,UAAWC,EAAhB,WAA2B,uBAAIxC,EAAM+B,eAArC,KAAyD/B,EAAMgC,iBClE1E,EAAuB,mBAAvB,EAAiD,mBCSpC4B,EAAO,SAAC5D,GACjB,OACI,iBAAKuC,UAAWC,EAAhB,WAAwB,gBACpBO,IAAI,4GACJI,IAAI,SACHnD,EAAM6D,SACP,iBAAKtB,UAAWC,EAAhB,WACI,oCACCxC,EAAM8D,iBCjBvB,EAA6B,4B,oBCQvBC,GAAYC,EAAAA,EAAAA,GAAiB,IAqBtBC,GAAmB/B,EAAAA,EAAAA,GAA+B,CAACC,KAAM,sBAAtCD,EAnBZ,SAAClC,GAGjB,OACI,kBAAMoC,SAAUpC,EAAMqC,aAAtB,WACI,0BACI,SAAC6B,EAAA,EAAD,CACIC,UAAWxB,EAAAA,GACXyB,KAAM,cACNC,YAAa,sBACbC,SAAU,CAACC,EAAAA,EAAeR,QAGlC,0BACI,iDClBHS,EAAUzE,EAAAA,MAAW,SAACC,GAQ/B,OACI,iBAAKuC,UAAWC,EAAhB,WACI,qCACA,uCACA,SAACyB,EAAD,CAAkB7B,SATP,SAACxB,GAChBZ,EAAMyE,QAAQ7D,EAAM8D,gBASf1E,EAAM2E,MAAM/C,KAAI,SAAAgD,GAAC,OAAI,SAAChB,EAAD,CAAiBiB,GAAID,EAAEC,GAAIhB,QAASe,EAAEf,QAASC,UAAWc,EAAEd,WAAjDc,EAAEC,a,iBCUlCC,GAAmBC,EAAAA,EAAAA,KAPR,SAACC,GACrB,MAAO,CACHL,MAAOK,EAAMC,YAAYN,SAKwB,CAACF,QAAAA,EAAAA,IAA1BM,CAAoCP,GCfvDU,EAAUnF,EAAAA,MAAW,SAACC,GAC/B,OACI,4BACI,SAAC6C,EAAD,CAAazB,QAASpB,EAAMoB,QACfhB,OAAQJ,EAAMI,OACdG,aAAcP,EAAMO,aACpBU,QAASjB,EAAMiB,QACfsC,UAAWvD,EAAMuD,UACjBE,YAAazD,EAAMyD,eAEhC,SAACqB,EAAD,U,8BCeNK,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WAqCD,OArCCA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,iBAAAA,MAGF,WACI,IAAIC,EAASC,KAAKrF,MAAMsF,MAAMC,OAAOH,OAChCA,IACDA,EAASC,KAAKrF,MAAMoF,SAEhBC,KAAKrF,MAAMwF,QAAQC,KAAK,UAIhCJ,KAAKrF,MAAM0F,eAAeN,GAC1BC,KAAKrF,MAAM2F,UAAUP,KACxB,+BAED,WACIC,KAAKO,mBACR,gCAED,SAAmBC,EAAgCC,GAC3CT,KAAKrF,MAAMsF,MAAMC,OAAOH,SAAWS,EAAUP,MAAMC,OAAOH,QAC1DC,KAAKO,mBAEZ,oBAED,WAEI,OACI,SAACV,EAAD,CAASjE,SAAUoE,KAAKrF,MAAMsF,MAAMC,OAAOH,OAClChE,QAASiE,KAAKrF,MAAMoB,QACpBhB,OAAQiF,KAAKrF,MAAMI,OACnBG,aAAc8E,KAAKrF,MAAMO,aACzBgD,UAAW8B,KAAKrF,MAAMuD,UACtBE,YAAa4B,KAAKrF,MAAMyD,kBAGxC,EArCC0B,CAAyBpF,EAAAA,WAqD/B,GAAegG,EAAAA,EAAAA,KACXhB,EAAAA,EAAAA,KAboB,SAACC,GAAD,MAAwC,CAC5D5D,QAAS4D,EAAMC,YAAY7D,QAC3BhB,OAAQ4E,EAAMC,YAAY7E,OAE1BgF,OAAQJ,EAAMgB,KAAKnB,GAEnBoB,OAAQjB,EAAMgB,KAAKC,UAOM,CAACP,eAAAA,EAAAA,GAAgBC,UAAAA,EAAAA,GAAWpF,aAAAA,EAAAA,GAAcgD,UAAAA,EAAAA,GAAWE,YAAAA,EAAAA,KAC9EyC,EAAAA,GACAC,EAAAA,EAHJ,CAIEhB,I,gICvFIiB,EAA6B,SAACpB,GAAD,MAAuD,CAEtFiB,OAAQjB,EAAMgB,KAAKC,SAGhB,SAASE,EAA6BE,GAWzC,OAAOtB,EAAAA,EAAAA,IAAQqB,EAARrB,EAAoCmB,EAAAA,EAAAA,KAVjB,SAAClG,GAEvB,IAAKiG,EAAuBjG,EAAvBiG,OAAWK,GAAhB,OAA4BtG,EAA5B,GAEA,OAAKiG,GAEE,SAACI,GAAD,UAAeC,KAFF,SAAC,KAAD,CAAUC,GAAI,iB,goFChB3B,SAASC,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,IAAIG,EAAY,MAAPJ,EAAc,KAAyB,qBAAXK,QAA0BL,EAAIK,OAAOC,WAAaN,EAAI,cAE3F,GAAU,MAANI,EAAJ,CACA,IAIIG,EAAIC,EAJJC,EAAO,GACPC,GAAK,EACLC,GAAK,EAIT,IACE,IAAKP,EAAKA,EAAGQ,KAAKZ,KAAQU,GAAMH,EAAKH,EAAGS,QAAQC,QAC9CL,EAAKzB,KAAKuB,EAAGpG,QAET8F,GAAKQ,EAAK5D,SAAWoD,GAH4BS,GAAK,IAK5D,MAAOK,GACPJ,GAAK,EACLH,EAAKO,EACL,QACA,IACOL,GAAsB,MAAhBN,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIO,EAAI,MAAMH,GAIlB,OAAOC,GFtBuB,CAAqBT,EAAKC,KAAM,EAAAe,EAAA,GAA2BhB,EAAKC,IGLjF,WACb,MAAM,IAAIgB,UAAU,6IHIgF","sources":["webpack://samurai-way/./src/components/Profile/Profileinfo/ProfileInfo.module.css?faff","components/Profile/Profileinfo/ProfileStatusWithHooks.tsx","components/Profile/Profileinfo/ProfileData.tsx","components/Profile/Profileinfo/ProfileDataForm.tsx","components/Profile/Profileinfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","components/Profile/MyPosts/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirectComponent.tsx","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__vt1lt\",\"mainPhoto\":\"ProfileInfo_mainPhoto__CDYEf\",\"contact\":\"ProfileInfo_contact__ZJ1vu\",\"formSummeryError\":\"ProfileInfo_formSummeryError__qZ-VB\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = React.memo((props: ProfileStatusType) => {\r\n\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    const toggleEditMode = () => {\r\n        setEditMode(!editMode)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n\r\n    return (\r\n        <div>\r\n            {!editMode\r\n                ?\r\n                <div>\r\n                    <b>Status :</b><span onDoubleClick={toggleEditMode}>{props.status || 'No status'}</span>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <input\r\n                        onChange={onChangeStatus}\r\n                        autoFocus={true}\r\n                        onBlur={toggleEditMode}\r\n                        value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n\r\n})\r\n","import {UserProfileType} from \"../../../redux/profile-reducer\";\r\nimport React from \"react\";\r\nimport {Contact} from \"./ProfileInfo\";\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: UserProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nexport const ProfileData = (props: ProfileDataPropsType) => {\r\n\r\n\r\n// @ts-ignore\r\n    return <div>\r\n        {props.isOwner && <div>\r\n            <button onClick={props.goToEditMode}>edit</button>\r\n        </div>}\r\n        <div>\r\n\r\n            <div><b>My name :</b>{\r\n                // @ts-ignore\r\n                props.profile.fullName\r\n            }</div>\r\n            <div><b>About me :</b>{\r\n                // @ts-ignore\r\n                props.profile.aboutMe\r\n            }</div>\r\n\r\n            <div><b>Looking for a job :</b> {\r\n                // @ts-ignore\r\n                props.profile.lookingForAJob ? 'yes' : 'no'}</div>\r\n            {// @ts-ignore\r\n                props.profile.lookingForAJob &&\r\n                <div><b>Looking for a job description:</b> {\r\n                    // @ts-ignore\r\n                    props.profile.lookingForAJobDescription}</div>}\r\n            <div>\r\n                <b>Contacts : {Object\r\n                    //@ts-ignore\r\n                    .keys(props.profile.contacts)\r\n                    .map((key) => <Contact key={key}\r\n                                           contactTitle={key}\r\n                        //@ts-ignore\r\n                                           contactValue={props.profile.contacts[key]}/>)}\r\n                </b>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n}","import React from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport {createField, GetStringKeys, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {UserProfileType} from \"../../../redux/profile-reducer\";\r\n\r\n\r\ntype PropsType = {\r\n    profile: UserProfileType\r\n}\r\ntype ProfileTypeKeys = GetStringKeys<UserProfileType>\r\nconst ProfileDataForm: React.FC<InjectedFormProps<UserProfileType, PropsType> & PropsType> = (props) => {\r\n\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <button>save</button>\r\n            {props.error &&\r\n                <div className={s.formSummeryError}>\r\n                    {props.error}\r\n                </div>\r\n            }\r\n        </div>\r\n        <div>\r\n            <div><b>My name :</b>{createField('Full name', 'fullName', [], Input)}</div>\r\n            <div><b>About me :</b>{createField('About me', 'aboutMe', [], Textarea)}</div>\r\n            <div>\r\n                <b>Contacts : {Object\r\n                    //@ts-ignore\r\n                    .keys(props.profile.contacts)\r\n                    .map((key) => {\r\n                        return <div key={key} className={s.contact}>\r\n                            <b>{key}: </b>{createField(key, `contacts.${key}`, [], Input)}\r\n                        </div>\r\n                    })}\r\n                </b>\r\n            </div>\r\n            <div><b>Looking for a job :</b> {createField('', 'lookingForAJob', [], Input, {type: 'checkbox'})}</div>\r\n            <div><b>My professional skills:</b> {createField('skills', 'lookingForAJobDescription', [], Textarea)}\r\n            </div>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nexport const ProfileDataFormReduxForm = reduxForm<UserProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm)","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport {UserProfileType} from \"../../../redux/profile-reducer\";\r\nimport {Preloader} from \"../../common/Preloader\";\r\nimport avatar from '../../../img/1.png'\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\nimport {ProfileData} from \"./ProfileData\";\r\nimport {ProfileDataFormReduxForm} from \"./ProfileDataForm\";\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: UserProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo: File) => void\r\n    saveProfile: (formData: UserProfileType) => Promise<any>\r\n}\r\nexport const ProfileInfo = React.memo((props: ProfileInfoPropsType) => {\r\n\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files !== null && e.target.files.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: any) => {\r\n        props.saveProfile(formData).then(() => {\r\n            setEditMode(false)\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img className={s.mainPhoto} src={props.profile.photos.large ? props.profile.photos.large : avatar}\r\n                     alt={'user avatar'}/>\r\n                <div>\r\n                    {props.isOwner && <input type=\"file\" onChange={onMainPhotoSelected}/>}\r\n                </div>\r\n                {editMode\r\n                    ? <ProfileDataFormReduxForm onSubmit={onSubmit} initialValues={props.profile}\r\n                                                profile={props.profile}/>\r\n                    : <ProfileData profile={props.profile} isOwner={props.isOwner}\r\n                                   goToEditMode={() => setEditMode(true)}/>\r\n                }\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nexport const Contact = (props: ContactPropsType) => {\r\n    return <div className={s.contact}><b>{props.contactTitle}</b>: {props.contactValue}</div>\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__1VuoF\",\"like\":\"Post_like__6rwzM\"};","import React from 'react';\nimport s from './Post.module.css'\n\nexport type PostPropsType = {\n    id: string\n    message: string\n    likeCount: number\n\n}\n\nexport const Post = (props: PostPropsType) => {\n    return (\n        <div className={s.item}><img\n            src=\"https://us.123rf.com/450wm/yupiramos/yupiramos1709/yupiramos170900442/85024718-engineer-avatar-.jpg?ver=6\"\n            alt=\"Logo\"/>\n            {props.message}\n            <div className={s.like}>\n                <span>like </span>\n                {props.likeCount}\n            </div>\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__QOJKf\"};","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {maxLengthCreator, requiredField} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\ntype AddPostFormDataType = {\r\n    newPostBody: string\r\n}\r\n\r\nconst maxLength = maxLengthCreator(30)\r\n\r\nconst AddPostForm = (props: InjectedFormProps<AddPostFormDataType>) => {\r\n\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    name={'newPostBody'}\r\n                    placeholder={'Enter your new post'}\r\n                    validate={[requiredField, maxLength]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport const AddPostFormRedux = reduxForm<AddPostFormDataType>({form: 'profileAddPostForm'})(AddPostForm)","import React from 'react';\nimport {Post} from \"./Post/Post\";\nimport s from './MyPosts.module.css'\nimport {MyPostPropsType} from \"./MyPostsContainer\";\nimport {AddPostFormRedux} from \"./AddPostForm\";\n\n\nexport const MyPosts = React.memo((props: MyPostPropsType) => {\n\n\n    const addNewPost = (value: { newPostBody: string }) => {\n        props.addPost(value.newPostBody)\n    }\n\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My post</h3>\n            <div>New post</div>\n            <AddPostFormRedux onSubmit={addNewPost}/>\n            {props.posts.map(p => <Post key={p.id} id={p.id} message={p.message} likeCount={p.likeCount}/>)}\n        </div>\n    );\n})\n\n\n","import React from 'react';\nimport {MyPosts} from \"./MyPosts\";\nimport {addPost} from \"../../../redux/profile-reducer\";\nimport {connect} from \"react-redux\";\nimport {StoreType} from \"../../../redux/redux-store\";\nimport {PostPropsType} from \"./Post/Post\";\n\ntype ProfilePageType = {\n    posts: PostPropsType[]\n    newPostText: string\n}\n\ntype mapStateToPropsType = {\n    posts: PostPropsType[]\n}\n\ntype mapDispatchToPropsType = {\n    addPost: (value: string) => void\n}\n\n\nexport type MyPostPropsType = mapStateToPropsType & mapDispatchToPropsType\n\nconst mapStateToProps = (state: StoreType): mapStateToPropsType => {\n    return {\n        posts: state.profilePage.posts\n    }\n}\n\n\nexport const MyPostsContainer = connect(mapStateToProps, {addPost})(MyPosts)","import React from 'react';\r\nimport {ProfileInfo} from \"./Profileinfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {UserProfileType} from \"../../redux/profile-reducer\";\r\n\r\n\r\ntype ProfilePropsType = {\r\n    profile: UserProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo: File) => void\r\n    saveProfile: (formData: UserProfileType) => Promise<any>\r\n}\r\n\r\nexport const Profile = React.memo((props: ProfilePropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         isOwner={props.isOwner}\r\n                         savePhoto={props.savePhoto}\r\n                         saveProfile={props.saveProfile}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n})\r\n\r\n\r\n","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {StoreType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getStatus,\r\n    getUserProfile,\r\n    savePhoto,\r\n    saveProfile,\r\n    updateStatus,\r\n    UserProfileType\r\n} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirectComponent} from \"../../hoc/withAuthRedirectComponent\";\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & mapStateToProps & mapDispatchToPropsType\r\n\r\ntype mapStateToProps = {\r\n    profile: UserProfileType\r\n    status: string\r\n    userId: string\r\n    isAuth: boolean\r\n}\r\n\r\n\r\ntype mapDispatchToPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (userId: string) => void\r\n    savePhoto: (photo: File) => void\r\n    saveProfile: (data: UserProfileType) => Promise<any>\r\n}\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType, StoreType> {\r\n\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.userId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<StoreType>) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}\r\n                     saveProfile={this.props.saveProfile}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst MapStateToProps = (state: StoreType): mapStateToProps => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    //@ts-ignore\r\n    userId: state.auth.id,\r\n    //@ts-ignore\r\n    isAuth: state.auth.isAuth,\r\n\r\n\r\n})\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(MapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    withAuthRedirectComponent\r\n)(ProfileContainer)","import {Redirect, withRouter} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {StoreType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStateToPropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nconst MapStateToPropsForRedirect = (state: StoreType): MapStateToPropsForRedirectType => ({\r\n// @ts-ignore\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirectComponent<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStateToPropsForRedirectType) => {\r\n\r\n        let {isAuth, ...restAuth} = props\r\n\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restAuth as T}/>\r\n    }\r\n\r\n    // @ts-ignore\r\n    return connect(MapStateToPropsForRedirect)(withRouter(RedirectComponent))\r\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["ProfileStatusWithHooks","React","props","useState","editMode","setEditMode","status","setStatus","toggleEditMode","updateStatus","useEffect","onChange","e","currentTarget","value","autoFocus","onBlur","onDoubleClick","ProfileData","isOwner","onClick","goToEditMode","profile","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Object","keys","contacts","map","key","Contact","contactTitle","contactValue","ProfileDataFormReduxForm","reduxForm","form","onSubmit","handleSubmit","error","className","s","createField","Input","Textarea","type","ProfileInfo","Preloader","src","photos","large","avatar","alt","target","files","length","savePhoto","formData","saveProfile","then","initialValues","Post","message","likeCount","maxLength","maxLengthCreator","AddPostFormRedux","Field","component","name","placeholder","validate","requiredField","MyPosts","addPost","newPostBody","posts","p","id","MyPostsContainer","connect","state","profilePage","Profile","ProfileContainer","userId","this","match","params","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","compose","auth","isAuth","withRouter","withAuthRedirectComponent","MapStateToPropsForRedirect","Component","restAuth","to","_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","err","unsupportedIterableToArray","TypeError"],"sourceRoot":""}